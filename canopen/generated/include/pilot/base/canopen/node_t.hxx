
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_base_canopen_node_t_HXX_
#define INCLUDE_pilot_base_canopen_node_t_HXX_

#include <vnx/Type.h>
#include <pilot/base/canopen/package.hxx>
#include <pilot/base/CAN_Frame.hxx>
#include <pilot/base/canopen/emcy_code_e.hxx>
#include <pilot/base/canopen/emcy_register_e.hxx>
#include <pilot/base/canopen/nmt_command_e.hxx>
#include <pilot/base/canopen/nmt_state_e.hxx>
#include <pilot/base/canopen/sdo_ccs_e.hxx>
#include <pilot/base/canopen/sdo_error_e.hxx>
#include <pilot/base/canopen/sdo_scs_e.hxx>


namespace pilot {
namespace base {
namespace canopen {

struct node_t {
	
	
	uint32_t id = 0;
	vnx::bool_t use_predefined_connection_set = true;
	uint32_t emcy = 0;
	uint32_t tx_pdo_1 = 0;
	uint32_t tx_pdo_2 = 0;
	uint32_t tx_pdo_3 = 0;
	uint32_t tx_pdo_4 = 0;
	uint32_t rx_pdo_1 = 0;
	uint32_t rx_pdo_2 = 0;
	uint32_t rx_pdo_3 = 0;
	uint32_t rx_pdo_4 = 0;
	uint32_t tx_sdo = 0;
	uint32_t rx_sdo = 0;
	uint32_t nmt = 0;
	std::set<::pilot::base::canopen::emcy_register_e> emcy_register;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x2368a77e3516a12aull;
	
	node_t() {}
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	static std::shared_ptr<const ::pilot::base::CAN_Frame> sync();
	static std::shared_ptr<const ::pilot::base::CAN_Frame> module_control(const ::pilot::base::canopen::nmt_command_e& command = ::pilot::base::canopen::nmt_command_e(), const uint8_t& node_id = 0);
	void calculate_can_ids();
	std::shared_ptr<const ::pilot::base::CAN_Frame> heartbeat(const ::pilot::base::canopen::nmt_state_e& state = ::pilot::base::canopen::nmt_state_e()) const;
	::pilot::base::canopen::emcy_code_e handle_emcy(const ::pilot::base::CAN_Frame& frame = ::pilot::base::CAN_Frame());
	::pilot::base::canopen::sdo_scs_e get_sdo_scs(const ::pilot::base::CAN_Frame& frame = ::pilot::base::CAN_Frame()) const;
	::pilot::base::canopen::sdo_ccs_e get_sdo_ccs(const ::pilot::base::CAN_Frame& frame = ::pilot::base::CAN_Frame()) const;
	::pilot::base::canopen::sdo_error_e get_sdo_error(const ::pilot::base::CAN_Frame& frame = ::pilot::base::CAN_Frame()) const;
	std::shared_ptr<const ::pilot::base::CAN_Frame> download_expedited(const uint16_t& index = 0, const uint8_t& subindex = 0, const uint32_t& data = 0, const uint32_t& num_bytes = 4) const;
	std::shared_ptr<const ::pilot::base::CAN_Frame> upload_expedited(const uint16_t& index = 0, const uint8_t& subindex = 0, const uint32_t& data = 0, const uint32_t& num_bytes = 4) const;
	std::vector<std::shared_ptr<const ::pilot::base::CAN_Frame>> download_segmented(const uint16_t& index = 0, const uint8_t& subindex = 0, const std::vector<uint8_t>& data = {}) const;
	std::vector<std::shared_ptr<const ::pilot::base::CAN_Frame>> upload_segmented(const uint16_t& index = 0, const uint8_t& subindex = 0, const std::vector<uint8_t>& data = {}) const;
	std::shared_ptr<const ::pilot::base::CAN_Frame> upload_request(const uint16_t& index = 0, const uint8_t& subindex = 0) const;
	std::shared_ptr<const ::pilot::base::CAN_Frame> download_confirm(const uint16_t& index = 0, const uint8_t& subindex = 0) const;
	std::pair<std::shared_ptr<const ::pilot::base::CAN_Frame>, std::shared_ptr<const ::pilot::base::CAN_Frame>> upload_segment_request(const uint16_t& index = 0, const uint8_t& subindex = 0) const;
	std::pair<std::shared_ptr<const ::pilot::base::CAN_Frame>, std::shared_ptr<const ::pilot::base::CAN_Frame>> download_segment_request(const uint16_t& index = 0, const uint8_t& subindex = 0) const;
	std::pair<std::vector<uint8_t>, vnx::bool_t> get_uploaded_data(const ::pilot::base::CAN_Frame& frame = ::pilot::base::CAN_Frame()) const;
	std::pair<std::vector<uint8_t>, vnx::bool_t> get_downloaded_data(const ::pilot::base::CAN_Frame& frame = ::pilot::base::CAN_Frame()) const;
	std::shared_ptr<const ::pilot::base::CAN_Frame> abort_server(const uint16_t& index = 0, const uint8_t& subindex = 0, const ::pilot::base::canopen::sdo_error_e& error = ::pilot::base::canopen::sdo_error_e()) const;
	std::shared_ptr<const ::pilot::base::CAN_Frame> abort_client(const uint16_t& index = 0, const uint8_t& subindex = 0, const ::pilot::base::canopen::sdo_error_e& error = ::pilot::base::canopen::sdo_error_e()) const;
	
	static std::shared_ptr<node_t> create();
	std::shared_ptr<node_t> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const node_t& _value);
	friend std::istream& operator>>(std::istream& _in, node_t& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace pilot
} // namespace base
} // namespace canopen


namespace vnx {

template<>
struct is_equivalent<::pilot::base::canopen::node_t> {
	bool operator()(const uint16_t* code, const TypeCode* type_code);
};

} // vnx

#endif // INCLUDE_pilot_base_canopen_node_t_HXX_
