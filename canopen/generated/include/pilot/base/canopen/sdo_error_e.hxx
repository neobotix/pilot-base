
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_base_canopen_sdo_error_e_HXX_
#define INCLUDE_pilot_base_canopen_sdo_error_e_HXX_

#include <vnx/Type.h>
#include <pilot/base/canopen/package.hxx>


namespace pilot {
namespace base {
namespace canopen {

struct sdo_error_e {
	
	enum enum_t : uint32_t {
		ACCESS_ERROR = 2983389154l,
		CANNOT_MAP_TO_PDO = 102157286l,
		CONNECTION_ERROR = 983926906l,
		DATA_TRANSFER = 3212620913l,
		DATA_TRANSFER_DEVICE_STATE = 1312520157l,
		DATA_TRANSFER_LOCAL = 2084807517l,
		GENERAL_ERROR = 2961084143l,
		GENERAL_INTERNAL_INCOMPATIBILITY = 2100302596l,
		GENERAL_PARAMETER_INCOMPATIBILITY = 2445333127l,
		HARDWARE_FAULT = 4172050110l,
		ILLEGAL_PARAMETER = 687006613l,
		INDEX_RESERVED = 1401645979l,
		INVALID_ADDRESS = 2671328695l,
		INVALID_BLOCK_CRC = 958542662l,
		INVALID_BLOCK_SEQUENCE_NUMBER = 1044192863l,
		INVALID_BLOCK_SIZE = 424332037l,
		INVALID_COMMAND = 2016579960l,
		MAX_VALUE_LESS_THAN_MIN_VALUE = 2572043046l,
		NO_DATA = 3860596597l,
		NO_ERROR = 134115394l,
		OBJECT_ACCESS_READ_ONLY = 1579395730l,
		OBJECT_ACCESS_UNSUPPORTED = 633315882l,
		OBJECT_ACCESS_WRITE_ONLY = 275658749l,
		OBJECT_ATTRIBUTE_INCONSISTENT = 1032774329l,
		OBJECT_DICTIONARY_FAIL = 576593538l,
		OBJECT_LENGTH_TOO_HIGH = 3600225261l,
		OBJECT_LENGTH_TOO_LOW = 3544164810l,
		OBJECT_NON_EXISTENT = 2188408222l,
		OUT_OF_MEMORY = 634510872l,
		PARAMETER_INCONSISTENT = 2919431651l,
		PARAMETER_VALUE_OUT_OF_RANGE = 1441488625l,
		PARAMETER_VALUE_TOO_HIGH = 4275016742l,
		PARAMETER_VALUE_TOO_LOW = 1419246051l,
		PDO_LENGTH_EXCEEDED = 722766574l,
		SERVICE_ERROR = 520912540l,
		SUB_INDEX_DOES_NOT_EXIST = 1435966880l,
		SUB_PARAMETER_VALUE_OUT_OF_RANGE = 1995812059l,
		TIMEOUT = 2481323511l,
		TOGGLE_BIT_ERROR = 3556383544l,
		TYPE_CONFLICT = 4291194971l,
		TYPE_MISMATCH = 2316570480l,
	};
	
	::pilot::base::canopen::sdo_error_e::enum_t value = ::pilot::base::canopen::sdo_error_e::enum_t(0);
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x9b27dfeddc64e9c2ull;
	
	sdo_error_e() {}
	
	sdo_error_e(const enum_t& _value) { value = _value; }
	sdo_error_e(const ::pilot::base::canopen::sdo_error_e& _other) { value = _other.value; }
	
	vnx::Hash64 get_type_hash() const;
	std::string get_type_name() const;
	const vnx::TypeCode* get_type_code() const;
	
	operator enum_t() const { return value; }
	sdo_error_e& operator=(const enum_t& _value) { value = _value; return *this; }
	sdo_error_e& operator=(const ::pilot::base::canopen::sdo_error_e& _other) { value = _other.value; return *this; }
	
	static std::shared_ptr<sdo_error_e> create();
	std::shared_ptr<sdo_error_e> clone() const;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code);
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const;
	
	void read(std::istream& _in);
	void write(std::ostream& _out) const;
	
	void accept(vnx::Visitor& _visitor) const;
	
	vnx::bool_t is_valid() const;
	std::string to_string() const;
	std::string to_string_value() const;
	std::string to_string_value_full() const;
	
	void from_string(const std::string& str);
	void from_string_value(const std::string& name);
	
	vnx::Object to_object() const;
	void from_object(const vnx::Object& object);
	
	vnx::Variant get_field(const std::string& name) const;
	void set_field(const std::string& name, const vnx::Variant& value);
	
	friend std::ostream& operator<<(std::ostream& _out, const sdo_error_e& _value);
	friend std::istream& operator>>(std::istream& _in, sdo_error_e& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace pilot
} // namespace base
} // namespace canopen


namespace vnx {

void read(TypeInput& in, ::pilot::base::canopen::sdo_error_e::enum_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::pilot::base::canopen::sdo_error_e::enum_t& value, const TypeCode* type_code, const uint16_t* code); ///< \private

template<>
std::string to_string(const ::pilot::base::canopen::sdo_error_e& _value); ///< \private

template<>
std::string to_string_value(const ::pilot::base::canopen::sdo_error_e& _value); ///< \private

template<>
std::string to_string_value_full(const ::pilot::base::canopen::sdo_error_e& _value); ///< \private

template<>
std::string to_string(const ::pilot::base::canopen::sdo_error_e::enum_t& _value); ///< \private

template<>
std::string to_string_value(const ::pilot::base::canopen::sdo_error_e::enum_t& _value); ///< \private

template<>
std::string to_string_value_full(const ::pilot::base::canopen::sdo_error_e::enum_t& _value); ///< \private

template<>
struct is_equivalent<::pilot::base::canopen::sdo_error_e> {
	bool operator()(const uint16_t* code, const TypeCode* type_code);
};

} // vnx

#endif // INCLUDE_pilot_base_canopen_sdo_error_e_HXX_
