
// AUTO GENERATED by vnxcppcodegen

#include <pilot/base/canopen/package.hxx>
#include <pilot/base/canopen/emcy_code_e.hxx>

#include <vnx/vnx.h>


namespace pilot {
namespace base {
namespace canopen {


const vnx::Hash64 emcy_code_e::VNX_TYPE_HASH(0xc0297cb989826ca8ull);
const vnx::Hash64 emcy_code_e::VNX_CODE_HASH(0x19522a178fe34b72ull);

vnx::Hash64 emcy_code_e::get_type_hash() const {
	return VNX_TYPE_HASH;
}

std::string emcy_code_e::get_type_name() const {
	return "pilot.base.canopen.emcy_code_e";
}

const vnx::TypeCode* emcy_code_e::get_type_code() const {
	return pilot::base::canopen::vnx_native_type_code_emcy_code_e;
}

std::shared_ptr<emcy_code_e> emcy_code_e::create() {
	return std::make_shared<emcy_code_e>();
}

std::shared_ptr<emcy_code_e> emcy_code_e::clone() const {
	return std::make_shared<emcy_code_e>(*this);
}

void emcy_code_e::read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) {
	vnx::read(_in, *this, _type_code, _code);
}

void emcy_code_e::write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const {
	vnx::write(_out, *this, _type_code, _code);
}

vnx::bool_t emcy_code_e::is_valid() const {
	switch(value) {
		case ADDITIONAL_FUNCTIONS: return true;
		case ADDITIONAL_MODULES: return true;
		case CAN_ERROR_PASSIVE: return true;
		case CAN_ID_COLLISION: return true;
		case CAN_OVERRUN: return true;
		case CAN_RECOVERED: return true;
		case COMMUNICATION: return true;
		case CURRENT: return true;
		case CURRENT_INPUT: return true;
		case CURRENT_INSIDE: return true;
		case CURRENT_OUTPUT: return true;
		case DAM_MPDO_NOT_PROCESSED: return true;
		case DATA_SET: return true;
		case DEVICE_SPECIFIC: return true;
		case EXTERNAL_ERROR: return true;
		case GENERIC_ERROR: return true;
		case HARDWARE: return true;
		case HEARTBEAT_ERROR: return true;
		case INTERNAL_SOFTWARE: return true;
		case MONITORING: return true;
		case NO_ERROR: return true;
		case PDO_LENGTH_ERROR: return true;
		case PDO_LENGTH_EXCEEDED: return true;
		case PROTOCOL_ERROR: return true;
		case RPDO_TIMEOUT: return true;
		case SOFTWARE: return true;
		case TEMPERATURE: return true;
		case TEMPERATURE_AMBIENT: return true;
		case TEMPERATURE_DEVICE: return true;
		case UNEXPECTED_SYNC_LENGTH: return true;
		case USER_SOFTWARE: return true;
		case VOLTAGE: return true;
		case VOLTAGE_INSIDE: return true;
		case VOLTAGE_MAINS: return true;
		case VOLTAGE_OUTPUT: return true;
	}
	return false;
}

std::string emcy_code_e::to_string() const {
	switch(value) {
		case ADDITIONAL_FUNCTIONS: return "\"ADDITIONAL_FUNCTIONS\"";
		case ADDITIONAL_MODULES: return "\"ADDITIONAL_MODULES\"";
		case CAN_ERROR_PASSIVE: return "\"CAN_ERROR_PASSIVE\"";
		case CAN_ID_COLLISION: return "\"CAN_ID_COLLISION\"";
		case CAN_OVERRUN: return "\"CAN_OVERRUN\"";
		case CAN_RECOVERED: return "\"CAN_RECOVERED\"";
		case COMMUNICATION: return "\"COMMUNICATION\"";
		case CURRENT: return "\"CURRENT\"";
		case CURRENT_INPUT: return "\"CURRENT_INPUT\"";
		case CURRENT_INSIDE: return "\"CURRENT_INSIDE\"";
		case CURRENT_OUTPUT: return "\"CURRENT_OUTPUT\"";
		case DAM_MPDO_NOT_PROCESSED: return "\"DAM_MPDO_NOT_PROCESSED\"";
		case DATA_SET: return "\"DATA_SET\"";
		case DEVICE_SPECIFIC: return "\"DEVICE_SPECIFIC\"";
		case EXTERNAL_ERROR: return "\"EXTERNAL_ERROR\"";
		case GENERIC_ERROR: return "\"GENERIC_ERROR\"";
		case HARDWARE: return "\"HARDWARE\"";
		case HEARTBEAT_ERROR: return "\"HEARTBEAT_ERROR\"";
		case INTERNAL_SOFTWARE: return "\"INTERNAL_SOFTWARE\"";
		case MONITORING: return "\"MONITORING\"";
		case NO_ERROR: return "\"NO_ERROR\"";
		case PDO_LENGTH_ERROR: return "\"PDO_LENGTH_ERROR\"";
		case PDO_LENGTH_EXCEEDED: return "\"PDO_LENGTH_EXCEEDED\"";
		case PROTOCOL_ERROR: return "\"PROTOCOL_ERROR\"";
		case RPDO_TIMEOUT: return "\"RPDO_TIMEOUT\"";
		case SOFTWARE: return "\"SOFTWARE\"";
		case TEMPERATURE: return "\"TEMPERATURE\"";
		case TEMPERATURE_AMBIENT: return "\"TEMPERATURE_AMBIENT\"";
		case TEMPERATURE_DEVICE: return "\"TEMPERATURE_DEVICE\"";
		case UNEXPECTED_SYNC_LENGTH: return "\"UNEXPECTED_SYNC_LENGTH\"";
		case USER_SOFTWARE: return "\"USER_SOFTWARE\"";
		case VOLTAGE: return "\"VOLTAGE\"";
		case VOLTAGE_INSIDE: return "\"VOLTAGE_INSIDE\"";
		case VOLTAGE_MAINS: return "\"VOLTAGE_MAINS\"";
		case VOLTAGE_OUTPUT: return "\"VOLTAGE_OUTPUT\"";
	}
	return std::to_string(value);
}

std::string emcy_code_e::to_string_value() const {
	switch(value) {
		case ADDITIONAL_FUNCTIONS: return "ADDITIONAL_FUNCTIONS";
		case ADDITIONAL_MODULES: return "ADDITIONAL_MODULES";
		case CAN_ERROR_PASSIVE: return "CAN_ERROR_PASSIVE";
		case CAN_ID_COLLISION: return "CAN_ID_COLLISION";
		case CAN_OVERRUN: return "CAN_OVERRUN";
		case CAN_RECOVERED: return "CAN_RECOVERED";
		case COMMUNICATION: return "COMMUNICATION";
		case CURRENT: return "CURRENT";
		case CURRENT_INPUT: return "CURRENT_INPUT";
		case CURRENT_INSIDE: return "CURRENT_INSIDE";
		case CURRENT_OUTPUT: return "CURRENT_OUTPUT";
		case DAM_MPDO_NOT_PROCESSED: return "DAM_MPDO_NOT_PROCESSED";
		case DATA_SET: return "DATA_SET";
		case DEVICE_SPECIFIC: return "DEVICE_SPECIFIC";
		case EXTERNAL_ERROR: return "EXTERNAL_ERROR";
		case GENERIC_ERROR: return "GENERIC_ERROR";
		case HARDWARE: return "HARDWARE";
		case HEARTBEAT_ERROR: return "HEARTBEAT_ERROR";
		case INTERNAL_SOFTWARE: return "INTERNAL_SOFTWARE";
		case MONITORING: return "MONITORING";
		case NO_ERROR: return "NO_ERROR";
		case PDO_LENGTH_ERROR: return "PDO_LENGTH_ERROR";
		case PDO_LENGTH_EXCEEDED: return "PDO_LENGTH_EXCEEDED";
		case PROTOCOL_ERROR: return "PROTOCOL_ERROR";
		case RPDO_TIMEOUT: return "RPDO_TIMEOUT";
		case SOFTWARE: return "SOFTWARE";
		case TEMPERATURE: return "TEMPERATURE";
		case TEMPERATURE_AMBIENT: return "TEMPERATURE_AMBIENT";
		case TEMPERATURE_DEVICE: return "TEMPERATURE_DEVICE";
		case UNEXPECTED_SYNC_LENGTH: return "UNEXPECTED_SYNC_LENGTH";
		case USER_SOFTWARE: return "USER_SOFTWARE";
		case VOLTAGE: return "VOLTAGE";
		case VOLTAGE_INSIDE: return "VOLTAGE_INSIDE";
		case VOLTAGE_MAINS: return "VOLTAGE_MAINS";
		case VOLTAGE_OUTPUT: return "VOLTAGE_OUTPUT";
	}
	return std::to_string(value);
}

std::string emcy_code_e::to_string_value_full() const {
	switch(value) {
		case ADDITIONAL_FUNCTIONS: return "pilot.base.canopen.emcy_code_e.ADDITIONAL_FUNCTIONS";
		case ADDITIONAL_MODULES: return "pilot.base.canopen.emcy_code_e.ADDITIONAL_MODULES";
		case CAN_ERROR_PASSIVE: return "pilot.base.canopen.emcy_code_e.CAN_ERROR_PASSIVE";
		case CAN_ID_COLLISION: return "pilot.base.canopen.emcy_code_e.CAN_ID_COLLISION";
		case CAN_OVERRUN: return "pilot.base.canopen.emcy_code_e.CAN_OVERRUN";
		case CAN_RECOVERED: return "pilot.base.canopen.emcy_code_e.CAN_RECOVERED";
		case COMMUNICATION: return "pilot.base.canopen.emcy_code_e.COMMUNICATION";
		case CURRENT: return "pilot.base.canopen.emcy_code_e.CURRENT";
		case CURRENT_INPUT: return "pilot.base.canopen.emcy_code_e.CURRENT_INPUT";
		case CURRENT_INSIDE: return "pilot.base.canopen.emcy_code_e.CURRENT_INSIDE";
		case CURRENT_OUTPUT: return "pilot.base.canopen.emcy_code_e.CURRENT_OUTPUT";
		case DAM_MPDO_NOT_PROCESSED: return "pilot.base.canopen.emcy_code_e.DAM_MPDO_NOT_PROCESSED";
		case DATA_SET: return "pilot.base.canopen.emcy_code_e.DATA_SET";
		case DEVICE_SPECIFIC: return "pilot.base.canopen.emcy_code_e.DEVICE_SPECIFIC";
		case EXTERNAL_ERROR: return "pilot.base.canopen.emcy_code_e.EXTERNAL_ERROR";
		case GENERIC_ERROR: return "pilot.base.canopen.emcy_code_e.GENERIC_ERROR";
		case HARDWARE: return "pilot.base.canopen.emcy_code_e.HARDWARE";
		case HEARTBEAT_ERROR: return "pilot.base.canopen.emcy_code_e.HEARTBEAT_ERROR";
		case INTERNAL_SOFTWARE: return "pilot.base.canopen.emcy_code_e.INTERNAL_SOFTWARE";
		case MONITORING: return "pilot.base.canopen.emcy_code_e.MONITORING";
		case NO_ERROR: return "pilot.base.canopen.emcy_code_e.NO_ERROR";
		case PDO_LENGTH_ERROR: return "pilot.base.canopen.emcy_code_e.PDO_LENGTH_ERROR";
		case PDO_LENGTH_EXCEEDED: return "pilot.base.canopen.emcy_code_e.PDO_LENGTH_EXCEEDED";
		case PROTOCOL_ERROR: return "pilot.base.canopen.emcy_code_e.PROTOCOL_ERROR";
		case RPDO_TIMEOUT: return "pilot.base.canopen.emcy_code_e.RPDO_TIMEOUT";
		case SOFTWARE: return "pilot.base.canopen.emcy_code_e.SOFTWARE";
		case TEMPERATURE: return "pilot.base.canopen.emcy_code_e.TEMPERATURE";
		case TEMPERATURE_AMBIENT: return "pilot.base.canopen.emcy_code_e.TEMPERATURE_AMBIENT";
		case TEMPERATURE_DEVICE: return "pilot.base.canopen.emcy_code_e.TEMPERATURE_DEVICE";
		case UNEXPECTED_SYNC_LENGTH: return "pilot.base.canopen.emcy_code_e.UNEXPECTED_SYNC_LENGTH";
		case USER_SOFTWARE: return "pilot.base.canopen.emcy_code_e.USER_SOFTWARE";
		case VOLTAGE: return "pilot.base.canopen.emcy_code_e.VOLTAGE";
		case VOLTAGE_INSIDE: return "pilot.base.canopen.emcy_code_e.VOLTAGE_INSIDE";
		case VOLTAGE_MAINS: return "pilot.base.canopen.emcy_code_e.VOLTAGE_MAINS";
		case VOLTAGE_OUTPUT: return "pilot.base.canopen.emcy_code_e.VOLTAGE_OUTPUT";
	}
	return std::to_string(value);
}

void emcy_code_e::from_string(const std::string& _str) {
	std::string _name;
	vnx::from_string(_str, _name);
	from_string_value(_name);
}

void emcy_code_e::from_string_value(const std::string& _name) {
	vnx::Variant var;
	vnx::from_string_value(_name, var);
	if(var.is_string()) {
		if(_name == "ADDITIONAL_FUNCTIONS") value = ADDITIONAL_FUNCTIONS;
		else if(_name == "ADDITIONAL_MODULES") value = ADDITIONAL_MODULES;
		else if(_name == "CAN_ERROR_PASSIVE") value = CAN_ERROR_PASSIVE;
		else if(_name == "CAN_ID_COLLISION") value = CAN_ID_COLLISION;
		else if(_name == "CAN_OVERRUN") value = CAN_OVERRUN;
		else if(_name == "CAN_RECOVERED") value = CAN_RECOVERED;
		else if(_name == "COMMUNICATION") value = COMMUNICATION;
		else if(_name == "CURRENT") value = CURRENT;
		else if(_name == "CURRENT_INPUT") value = CURRENT_INPUT;
		else if(_name == "CURRENT_INSIDE") value = CURRENT_INSIDE;
		else if(_name == "CURRENT_OUTPUT") value = CURRENT_OUTPUT;
		else if(_name == "DAM_MPDO_NOT_PROCESSED") value = DAM_MPDO_NOT_PROCESSED;
		else if(_name == "DATA_SET") value = DATA_SET;
		else if(_name == "DEVICE_SPECIFIC") value = DEVICE_SPECIFIC;
		else if(_name == "EXTERNAL_ERROR") value = EXTERNAL_ERROR;
		else if(_name == "GENERIC_ERROR") value = GENERIC_ERROR;
		else if(_name == "HARDWARE") value = HARDWARE;
		else if(_name == "HEARTBEAT_ERROR") value = HEARTBEAT_ERROR;
		else if(_name == "INTERNAL_SOFTWARE") value = INTERNAL_SOFTWARE;
		else if(_name == "MONITORING") value = MONITORING;
		else if(_name == "NO_ERROR") value = NO_ERROR;
		else if(_name == "PDO_LENGTH_ERROR") value = PDO_LENGTH_ERROR;
		else if(_name == "PDO_LENGTH_EXCEEDED") value = PDO_LENGTH_EXCEEDED;
		else if(_name == "PROTOCOL_ERROR") value = PROTOCOL_ERROR;
		else if(_name == "RPDO_TIMEOUT") value = RPDO_TIMEOUT;
		else if(_name == "SOFTWARE") value = SOFTWARE;
		else if(_name == "TEMPERATURE") value = TEMPERATURE;
		else if(_name == "TEMPERATURE_AMBIENT") value = TEMPERATURE_AMBIENT;
		else if(_name == "TEMPERATURE_DEVICE") value = TEMPERATURE_DEVICE;
		else if(_name == "UNEXPECTED_SYNC_LENGTH") value = UNEXPECTED_SYNC_LENGTH;
		else if(_name == "USER_SOFTWARE") value = USER_SOFTWARE;
		else if(_name == "VOLTAGE") value = VOLTAGE;
		else if(_name == "VOLTAGE_INSIDE") value = VOLTAGE_INSIDE;
		else if(_name == "VOLTAGE_MAINS") value = VOLTAGE_MAINS;
		else if(_name == "VOLTAGE_OUTPUT") value = VOLTAGE_OUTPUT;
		else value = enum_t(vnx::hash64(_name));
	} else {
		value = enum_t(std::stoul(_name.c_str(), nullptr, 0));
	}
}

void emcy_code_e::accept(vnx::Visitor& _visitor) const {
	std::string _name;
	switch(value) {
		case ADDITIONAL_FUNCTIONS: _name = "ADDITIONAL_FUNCTIONS"; break;
		case ADDITIONAL_MODULES: _name = "ADDITIONAL_MODULES"; break;
		case CAN_ERROR_PASSIVE: _name = "CAN_ERROR_PASSIVE"; break;
		case CAN_ID_COLLISION: _name = "CAN_ID_COLLISION"; break;
		case CAN_OVERRUN: _name = "CAN_OVERRUN"; break;
		case CAN_RECOVERED: _name = "CAN_RECOVERED"; break;
		case COMMUNICATION: _name = "COMMUNICATION"; break;
		case CURRENT: _name = "CURRENT"; break;
		case CURRENT_INPUT: _name = "CURRENT_INPUT"; break;
		case CURRENT_INSIDE: _name = "CURRENT_INSIDE"; break;
		case CURRENT_OUTPUT: _name = "CURRENT_OUTPUT"; break;
		case DAM_MPDO_NOT_PROCESSED: _name = "DAM_MPDO_NOT_PROCESSED"; break;
		case DATA_SET: _name = "DATA_SET"; break;
		case DEVICE_SPECIFIC: _name = "DEVICE_SPECIFIC"; break;
		case EXTERNAL_ERROR: _name = "EXTERNAL_ERROR"; break;
		case GENERIC_ERROR: _name = "GENERIC_ERROR"; break;
		case HARDWARE: _name = "HARDWARE"; break;
		case HEARTBEAT_ERROR: _name = "HEARTBEAT_ERROR"; break;
		case INTERNAL_SOFTWARE: _name = "INTERNAL_SOFTWARE"; break;
		case MONITORING: _name = "MONITORING"; break;
		case NO_ERROR: _name = "NO_ERROR"; break;
		case PDO_LENGTH_ERROR: _name = "PDO_LENGTH_ERROR"; break;
		case PDO_LENGTH_EXCEEDED: _name = "PDO_LENGTH_EXCEEDED"; break;
		case PROTOCOL_ERROR: _name = "PROTOCOL_ERROR"; break;
		case RPDO_TIMEOUT: _name = "RPDO_TIMEOUT"; break;
		case SOFTWARE: _name = "SOFTWARE"; break;
		case TEMPERATURE: _name = "TEMPERATURE"; break;
		case TEMPERATURE_AMBIENT: _name = "TEMPERATURE_AMBIENT"; break;
		case TEMPERATURE_DEVICE: _name = "TEMPERATURE_DEVICE"; break;
		case UNEXPECTED_SYNC_LENGTH: _name = "UNEXPECTED_SYNC_LENGTH"; break;
		case USER_SOFTWARE: _name = "USER_SOFTWARE"; break;
		case VOLTAGE: _name = "VOLTAGE"; break;
		case VOLTAGE_INSIDE: _name = "VOLTAGE_INSIDE"; break;
		case VOLTAGE_MAINS: _name = "VOLTAGE_MAINS"; break;
		case VOLTAGE_OUTPUT: _name = "VOLTAGE_OUTPUT"; break;
	}
	_visitor.enum_value(value, _name);
}

void emcy_code_e::write(std::ostream& _out) const {
	switch(value) {
		case ADDITIONAL_FUNCTIONS: _out << "\"ADDITIONAL_FUNCTIONS\""; break;
		case ADDITIONAL_MODULES: _out << "\"ADDITIONAL_MODULES\""; break;
		case CAN_ERROR_PASSIVE: _out << "\"CAN_ERROR_PASSIVE\""; break;
		case CAN_ID_COLLISION: _out << "\"CAN_ID_COLLISION\""; break;
		case CAN_OVERRUN: _out << "\"CAN_OVERRUN\""; break;
		case CAN_RECOVERED: _out << "\"CAN_RECOVERED\""; break;
		case COMMUNICATION: _out << "\"COMMUNICATION\""; break;
		case CURRENT: _out << "\"CURRENT\""; break;
		case CURRENT_INPUT: _out << "\"CURRENT_INPUT\""; break;
		case CURRENT_INSIDE: _out << "\"CURRENT_INSIDE\""; break;
		case CURRENT_OUTPUT: _out << "\"CURRENT_OUTPUT\""; break;
		case DAM_MPDO_NOT_PROCESSED: _out << "\"DAM_MPDO_NOT_PROCESSED\""; break;
		case DATA_SET: _out << "\"DATA_SET\""; break;
		case DEVICE_SPECIFIC: _out << "\"DEVICE_SPECIFIC\""; break;
		case EXTERNAL_ERROR: _out << "\"EXTERNAL_ERROR\""; break;
		case GENERIC_ERROR: _out << "\"GENERIC_ERROR\""; break;
		case HARDWARE: _out << "\"HARDWARE\""; break;
		case HEARTBEAT_ERROR: _out << "\"HEARTBEAT_ERROR\""; break;
		case INTERNAL_SOFTWARE: _out << "\"INTERNAL_SOFTWARE\""; break;
		case MONITORING: _out << "\"MONITORING\""; break;
		case NO_ERROR: _out << "\"NO_ERROR\""; break;
		case PDO_LENGTH_ERROR: _out << "\"PDO_LENGTH_ERROR\""; break;
		case PDO_LENGTH_EXCEEDED: _out << "\"PDO_LENGTH_EXCEEDED\""; break;
		case PROTOCOL_ERROR: _out << "\"PROTOCOL_ERROR\""; break;
		case RPDO_TIMEOUT: _out << "\"RPDO_TIMEOUT\""; break;
		case SOFTWARE: _out << "\"SOFTWARE\""; break;
		case TEMPERATURE: _out << "\"TEMPERATURE\""; break;
		case TEMPERATURE_AMBIENT: _out << "\"TEMPERATURE_AMBIENT\""; break;
		case TEMPERATURE_DEVICE: _out << "\"TEMPERATURE_DEVICE\""; break;
		case UNEXPECTED_SYNC_LENGTH: _out << "\"UNEXPECTED_SYNC_LENGTH\""; break;
		case USER_SOFTWARE: _out << "\"USER_SOFTWARE\""; break;
		case VOLTAGE: _out << "\"VOLTAGE\""; break;
		case VOLTAGE_INSIDE: _out << "\"VOLTAGE_INSIDE\""; break;
		case VOLTAGE_MAINS: _out << "\"VOLTAGE_MAINS\""; break;
		case VOLTAGE_OUTPUT: _out << "\"VOLTAGE_OUTPUT\""; break;
		default: _out << value;
	}
}

void emcy_code_e::read(std::istream& _in) {
	from_string_value(vnx::read(_in).to_string_value());
}

vnx::Object emcy_code_e::to_object() const {
	vnx::Object _object;
	_object["__type"] = "pilot.base.canopen.emcy_code_e";
	_object["value"] = value;
	return _object;
}

void emcy_code_e::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "value") {
			_entry.second.to(value);
		}
	}
}

vnx::Variant emcy_code_e::get_field(const std::string& _name) const {
	if(_name == "value") {
		return vnx::Variant(value);
	}
	return vnx::Variant();
}

void emcy_code_e::set_field(const std::string& _name, const vnx::Variant& _value) {
	if(_name == "value") {
		_value.to(value);
	} else {
		throw std::logic_error("no such field: '" + _name + "'");
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const emcy_code_e& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, emcy_code_e& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* emcy_code_e::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> emcy_code_e::static_create_type_code() {
	auto type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "pilot.base.canopen.emcy_code_e";
	type_code->type_hash = vnx::Hash64(0xc0297cb989826ca8ull);
	type_code->code_hash = vnx::Hash64(0x19522a178fe34b72ull);
	type_code->is_native = true;
	type_code->is_enum = true;
	type_code->native_size = sizeof(::pilot::base::canopen::emcy_code_e);
	type_code->create_value = []() -> std::shared_ptr<vnx::Value> { return std::make_shared<vnx::Struct<emcy_code_e>>(); };
	type_code->fields.resize(1);
	{
		auto& field = type_code->fields[0];
		field.data_size = 4;
		field.name = "value";
		field.code = {3};
	}
	type_code->enum_map[2521423643] = "ADDITIONAL_FUNCTIONS";
	type_code->enum_map[583241226] = "ADDITIONAL_MODULES";
	type_code->enum_map[2504912088] = "CAN_ERROR_PASSIVE";
	type_code->enum_map[2986669073] = "CAN_ID_COLLISION";
	type_code->enum_map[1071682401] = "CAN_OVERRUN";
	type_code->enum_map[2306010892] = "CAN_RECOVERED";
	type_code->enum_map[487288233] = "COMMUNICATION";
	type_code->enum_map[2853934165] = "CURRENT";
	type_code->enum_map[2582093355] = "CURRENT_INPUT";
	type_code->enum_map[513425947] = "CURRENT_INSIDE";
	type_code->enum_map[1254426932] = "CURRENT_OUTPUT";
	type_code->enum_map[506174374] = "DAM_MPDO_NOT_PROCESSED";
	type_code->enum_map[4276352321] = "DATA_SET";
	type_code->enum_map[3766952636] = "DEVICE_SPECIFIC";
	type_code->enum_map[616254643] = "EXTERNAL_ERROR";
	type_code->enum_map[3059157402] = "GENERIC_ERROR";
	type_code->enum_map[3520157551] = "HARDWARE";
	type_code->enum_map[3354804095] = "HEARTBEAT_ERROR";
	type_code->enum_map[3976734154] = "INTERNAL_SOFTWARE";
	type_code->enum_map[416611857] = "MONITORING";
	type_code->enum_map[134115394] = "NO_ERROR";
	type_code->enum_map[1226538660] = "PDO_LENGTH_ERROR";
	type_code->enum_map[722766574] = "PDO_LENGTH_EXCEEDED";
	type_code->enum_map[1346031774] = "PROTOCOL_ERROR";
	type_code->enum_map[3265130901] = "RPDO_TIMEOUT";
	type_code->enum_map[2410844169] = "SOFTWARE";
	type_code->enum_map[2506210592] = "TEMPERATURE";
	type_code->enum_map[3976088382] = "TEMPERATURE_AMBIENT";
	type_code->enum_map[2264987537] = "TEMPERATURE_DEVICE";
	type_code->enum_map[1608562062] = "UNEXPECTED_SYNC_LENGTH";
	type_code->enum_map[1994157918] = "USER_SOFTWARE";
	type_code->enum_map[1650878572] = "VOLTAGE";
	type_code->enum_map[707070561] = "VOLTAGE_INSIDE";
	type_code->enum_map[2819794729] = "VOLTAGE_MAINS";
	type_code->enum_map[2121941326] = "VOLTAGE_OUTPUT";
	type_code->build();
	return type_code;
}


} // namespace pilot
} // namespace base
} // namespace canopen


namespace vnx {

void read(TypeInput& in, ::pilot::base::canopen::emcy_code_e& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		Variant tmp;
		vnx::read(in, tmp, type_code, code);
		if(tmp.is_string()) {
			vnx::from_string(tmp.to_string(), value);
		} else if(tmp.is_ulong()) {
			value = ::pilot::base::canopen::emcy_code_e::enum_t(tmp.to<uint32_t>());
		} else {
			value = ::pilot::base::canopen::emcy_code_e();
		}
		return;
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: {
				vnx::skip(in, type_code, code);
				return;
			}
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		if(const auto* const _field = type_code->field_map[0]) {
			vnx::read_value(_buf + _field->offset, value.value, _field->code.data());
		}
	}
	for(const auto* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::pilot::base::canopen::emcy_code_e& value, const TypeCode* type_code, const uint16_t* code) {
	if(code && code[0] == CODE_STRING) {
		vnx::write(out, value.to_string_value(), nullptr, code);
		return;
	}
	if(code && code[0] == CODE_UINT32) {
		vnx::write(out, value.value, nullptr, code);
		return;
	}
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = pilot::base::canopen::vnx_native_type_code_emcy_code_e;
		out.write_type_code(type_code);
		vnx::write_class_header<::pilot::base::canopen::emcy_code_e>(out);
	}
	else if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(4);
	vnx::write_value(_buf + 0, value.value);
}

void read(std::istream& in, ::pilot::base::canopen::emcy_code_e& value) {
	value.read(in);
}

void write(std::ostream& out, const ::pilot::base::canopen::emcy_code_e& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::pilot::base::canopen::emcy_code_e& value) {
	value.accept(visitor);
}

void read(TypeInput& in, ::pilot::base::canopen::emcy_code_e::enum_t& value, const TypeCode* type_code, const uint16_t* code) {
	uint32_t tmp = 0;
	vnx::read(in, tmp, type_code, code);
	value = ::pilot::base::canopen::emcy_code_e::enum_t(tmp);
}

void write(TypeOutput& out, const ::pilot::base::canopen::emcy_code_e::enum_t& value, const TypeCode* type_code, const uint16_t* code) {
	vnx::write(out, uint32_t(value), type_code, code);
}

template<>
std::string to_string(const ::pilot::base::canopen::emcy_code_e& _value) {
	return _value.to_string();
}

template<>
std::string to_string_value(const ::pilot::base::canopen::emcy_code_e& _value) {
	return _value.to_string_value();
}

template<>
std::string to_string_value_full(const ::pilot::base::canopen::emcy_code_e& _value) {
	return _value.to_string_value_full();
}

template<>
std::string to_string(const ::pilot::base::canopen::emcy_code_e::enum_t& _value) {
	return ::pilot::base::canopen::emcy_code_e(_value).to_string();
}

template<>
std::string to_string_value(const ::pilot::base::canopen::emcy_code_e::enum_t& _value) {
	return ::pilot::base::canopen::emcy_code_e(_value).to_string_value();
}

template<>
std::string to_string_value_full(const ::pilot::base::canopen::emcy_code_e::enum_t& _value) {
	return ::pilot::base::canopen::emcy_code_e(_value).to_string_value_full();
}

bool is_equivalent<::pilot::base::canopen::emcy_code_e>::operator()(const uint16_t* code, const TypeCode* type_code) {
	if(code[0] != CODE_STRUCT || !type_code) {
		return false;
	}
	type_code = type_code->depends[code[1]];
	return type_code->type_hash == ::pilot::base::canopen::emcy_code_e::VNX_TYPE_HASH && type_code->is_equivalent;
}

} // vnx
