
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_base_CAN_Frame_HXX_
#define INCLUDE_pilot_base_CAN_Frame_HXX_

#include <pilot/base/package.hxx>
#include <vnx/Value.h>


namespace pilot {
namespace base {

class CAN_Frame : public ::vnx::Value {
public:
	
	int64_t time = 0;
	uint32_t id = 0;
	uint8_t size = 0;
	std::array<uint8_t, 8> data = {};
	vnx::bool_t is_big_endian = 0;
	
	typedef ::vnx::Value Super;
	
	static const vnx::Hash64 VNX_TYPE_HASH;
	static const vnx::Hash64 VNX_CODE_HASH;
	
	static constexpr uint64_t VNX_TYPE_ID = 0x4d70a2725dc4def6ull;
	
	CAN_Frame() {}
	
	vnx::Hash64 get_type_hash() const override;
	std::string get_type_name() const override;
	const vnx::TypeCode* get_type_code() const override;
	
	virtual vnx::bool_t get_bit(const int32_t& pos = 0) const;
	virtual void set_bit(const int32_t& pos = 0, const vnx::bool_t& value = 0);
	virtual vnx::bool_t get_bool(const int32_t& pos = 0) const;
	virtual int32_t get_int(const int32_t& pos = 0, const int32_t& size = 0, const int32_t& offset = 0) const;
	virtual uint32_t get_uint(const int32_t& pos = 0, const int32_t& size = 0, const int32_t& offset = 0) const;
	virtual vnx::float32_t get_float_signed(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0) const;
	virtual vnx::float32_t get_float_unsigned(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0) const;
	virtual void set_bool(const int32_t& pos = 0, const vnx::bool_t& value = 0);
	virtual void set_int(const int32_t& pos = 0, const int32_t& size = 0, const int32_t& value = 0, const int32_t& offset = 0);
	virtual void set_uint(const int32_t& pos = 0, const int32_t& size = 0, const uint32_t& value = 0, const int32_t& offset = 0);
	virtual void set_float_signed(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& value = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0);
	virtual void set_float_unsigned(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& value = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0);
	virtual vnx::bool_t get_bool_dbc(const int32_t& pos = 0) const;
	virtual int32_t get_int_dbc(const int32_t& pos = 0, const int32_t& size = 0, const int32_t& offset = 0) const;
	virtual uint32_t get_uint_dbc(const int32_t& pos = 0, const int32_t& size = 0, const int32_t& offset = 0) const;
	virtual vnx::float32_t get_float_signed_dbc(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0) const;
	virtual vnx::float32_t get_float_unsigned_dbc(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0) const;
	virtual void set_bool_dbc(const int32_t& pos = 0, const vnx::bool_t& value = 0);
	virtual void set_int_dbc(const int32_t& pos = 0, const int32_t& size = 0, const int32_t& value = 0, const int32_t& offset = 0);
	virtual void set_uint_dbc(const int32_t& pos = 0, const int32_t& size = 0, const uint32_t& value = 0, const int32_t& offset = 0);
	virtual void set_float_signed_dbc(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& value = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0);
	virtual void set_float_unsigned_dbc(const int32_t& pos = 0, const int32_t& size = 0, const vnx::float32_t& value = 0, const vnx::float32_t& scale = 0, const vnx::float32_t& offset = 0);
	
	static std::shared_ptr<CAN_Frame> create();
	std::shared_ptr<vnx::Value> clone() const override;
	
	void read(vnx::TypeInput& _in, const vnx::TypeCode* _type_code, const uint16_t* _code) override;
	void write(vnx::TypeOutput& _out, const vnx::TypeCode* _type_code, const uint16_t* _code) const override;
	
	void read(std::istream& _in) override;
	void write(std::ostream& _out) const override;
	
	void accept(vnx::Visitor& _visitor) const override;
	
	vnx::Object to_object() const override;
	void from_object(const vnx::Object& object) override;
	
	vnx::Variant get_field(const std::string& name) const override;
	void set_field(const std::string& name, const vnx::Variant& value) override;
	
	friend std::ostream& operator<<(std::ostream& _out, const CAN_Frame& _value);
	friend std::istream& operator>>(std::istream& _in, CAN_Frame& _value);
	
	static const vnx::TypeCode* static_get_type_code();
	static std::shared_ptr<vnx::TypeCode> static_create_type_code();
	
};


} // namespace pilot
} // namespace base


namespace vnx {

} // vnx

#endif // INCLUDE_pilot_base_CAN_Frame_HXX_
