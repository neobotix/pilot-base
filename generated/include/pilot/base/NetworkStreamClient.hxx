
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_base_NetworkStream_CLIENT_HXX_
#define INCLUDE_pilot_base_NetworkStream_CLIENT_HXX_

#include <vnx/Client.h>
#include <pilot/base/DataPacket.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>


namespace pilot {
namespace base {

class NetworkStreamClient : public vnx::Client {
public:
	NetworkStreamClient(const std::string& service_name);
	
	NetworkStreamClient(vnx::Hash64 service_addr);
	
	::vnx::Object vnx_get_config_object();
	
	::vnx::Variant vnx_get_config(const std::string& name = "");
	
	void vnx_set_config_object(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config_object_async(const ::vnx::Object& config = ::vnx::Object());
	
	void vnx_set_config(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	void vnx_set_config_async(const std::string& name = "", const ::vnx::Variant& value = ::vnx::Variant());
	
	::vnx::TypeCode vnx_get_type_code();
	
	std::shared_ptr<const ::vnx::ModuleInfo> vnx_get_module_info();
	
	void vnx_restart();
	
	void vnx_restart_async();
	
	void vnx_stop();
	
	void vnx_stop_async();
	
	vnx::bool_t vnx_self_test();
	
	vnx::bool_t is_connected();
	
	void connect();
	
	void connect_async();
	
	void disconnect();
	
	void disconnect_async();
	
};


} // namespace pilot
} // namespace base

#endif // INCLUDE_pilot_base_NetworkStream_CLIENT_HXX_
