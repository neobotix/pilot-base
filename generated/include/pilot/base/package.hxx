
// AUTO GENERATED by vnxcppcodegen

#ifndef INCLUDE_pilot_base_PACKAGE_HXX_
#define INCLUDE_pilot_base_PACKAGE_HXX_

#include <vnx/Type.h>

#include <vnx/package.hxx>


namespace pilot {
namespace base {


class CAN_Frame;
class CAN_ProxyBase;
class CAN_Proxy_send;
class CAN_Proxy_send_return;
class DataPacket;
class SerialPortBase;
class SerialPort_close_port;
class SerialPort_close_port_return;
class SerialPort_open_port;
class SerialPort_open_port_return;
class SocketSignal;
class UDP_ReceiverBase;
class UDP_Receiver_close_port;
class UDP_Receiver_close_port_return;
class UDP_Receiver_open_port;
class UDP_Receiver_open_port_return;
struct can_adapter_e;

extern const vnx::TypeCode* const vnx_native_type_code_CAN_Frame; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_CAN_ProxyBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_CAN_Proxy_send; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_CAN_Proxy_send_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_DataPacket; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SerialPortBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SerialPort_close_port; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SerialPort_close_port_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SerialPort_open_port; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SerialPort_open_port_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_SocketSignal; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_UDP_ReceiverBase; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_UDP_Receiver_close_port; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_UDP_Receiver_close_port_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_UDP_Receiver_open_port; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_UDP_Receiver_open_port_return; ///< \private
extern const vnx::TypeCode* const vnx_native_type_code_can_adapter_e; ///< \private

} // namespace pilot
} // namespace base


namespace vnx {

void read(TypeInput& in, ::pilot::base::CAN_Frame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::CAN_ProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::CAN_Proxy_send& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::CAN_Proxy_send_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::DataPacket& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::SerialPortBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::SerialPort_close_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::SerialPort_close_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::SerialPort_open_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::SerialPort_open_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::SocketSignal& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::UDP_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::UDP_Receiver_close_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::UDP_Receiver_close_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::UDP_Receiver_open_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::UDP_Receiver_open_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void read(TypeInput& in, ::pilot::base::can_adapter_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void write(TypeOutput& out, const ::pilot::base::CAN_Frame& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::CAN_ProxyBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::CAN_Proxy_send& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::CAN_Proxy_send_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::DataPacket& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::SerialPortBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::SerialPort_close_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::SerialPort_close_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::SerialPort_open_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::SerialPort_open_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::SocketSignal& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::UDP_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_close_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_close_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_open_port& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_open_port_return& value, const TypeCode* type_code, const uint16_t* code); ///< \private
void write(TypeOutput& out, const ::pilot::base::can_adapter_e& value, const TypeCode* type_code, const uint16_t* code); ///< \private

void read(std::istream& in, ::pilot::base::CAN_Frame& value); ///< \private
void read(std::istream& in, ::pilot::base::CAN_ProxyBase& value); ///< \private
void read(std::istream& in, ::pilot::base::CAN_Proxy_send& value); ///< \private
void read(std::istream& in, ::pilot::base::CAN_Proxy_send_return& value); ///< \private
void read(std::istream& in, ::pilot::base::DataPacket& value); ///< \private
void read(std::istream& in, ::pilot::base::SerialPortBase& value); ///< \private
void read(std::istream& in, ::pilot::base::SerialPort_close_port& value); ///< \private
void read(std::istream& in, ::pilot::base::SerialPort_close_port_return& value); ///< \private
void read(std::istream& in, ::pilot::base::SerialPort_open_port& value); ///< \private
void read(std::istream& in, ::pilot::base::SerialPort_open_port_return& value); ///< \private
void read(std::istream& in, ::pilot::base::SocketSignal& value); ///< \private
void read(std::istream& in, ::pilot::base::UDP_ReceiverBase& value); ///< \private
void read(std::istream& in, ::pilot::base::UDP_Receiver_close_port& value); ///< \private
void read(std::istream& in, ::pilot::base::UDP_Receiver_close_port_return& value); ///< \private
void read(std::istream& in, ::pilot::base::UDP_Receiver_open_port& value); ///< \private
void read(std::istream& in, ::pilot::base::UDP_Receiver_open_port_return& value); ///< \private
void read(std::istream& in, ::pilot::base::can_adapter_e& value); ///< \private

void write(std::ostream& out, const ::pilot::base::CAN_Frame& value); ///< \private
void write(std::ostream& out, const ::pilot::base::CAN_ProxyBase& value); ///< \private
void write(std::ostream& out, const ::pilot::base::CAN_Proxy_send& value); ///< \private
void write(std::ostream& out, const ::pilot::base::CAN_Proxy_send_return& value); ///< \private
void write(std::ostream& out, const ::pilot::base::DataPacket& value); ///< \private
void write(std::ostream& out, const ::pilot::base::SerialPortBase& value); ///< \private
void write(std::ostream& out, const ::pilot::base::SerialPort_close_port& value); ///< \private
void write(std::ostream& out, const ::pilot::base::SerialPort_close_port_return& value); ///< \private
void write(std::ostream& out, const ::pilot::base::SerialPort_open_port& value); ///< \private
void write(std::ostream& out, const ::pilot::base::SerialPort_open_port_return& value); ///< \private
void write(std::ostream& out, const ::pilot::base::SocketSignal& value); ///< \private
void write(std::ostream& out, const ::pilot::base::UDP_ReceiverBase& value); ///< \private
void write(std::ostream& out, const ::pilot::base::UDP_Receiver_close_port& value); ///< \private
void write(std::ostream& out, const ::pilot::base::UDP_Receiver_close_port_return& value); ///< \private
void write(std::ostream& out, const ::pilot::base::UDP_Receiver_open_port& value); ///< \private
void write(std::ostream& out, const ::pilot::base::UDP_Receiver_open_port_return& value); ///< \private
void write(std::ostream& out, const ::pilot::base::can_adapter_e& value); ///< \private

void accept(Visitor& visitor, const ::pilot::base::CAN_Frame& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::CAN_ProxyBase& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::CAN_Proxy_send& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::CAN_Proxy_send_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::DataPacket& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::SerialPortBase& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::SerialPort_close_port& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::SerialPort_close_port_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::SerialPort_open_port& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::SerialPort_open_port_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::SocketSignal& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::UDP_ReceiverBase& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_close_port& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_close_port_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_open_port& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_open_port_return& value); ///< \private
void accept(Visitor& visitor, const ::pilot::base::can_adapter_e& value); ///< \private

/// \private
template<>
struct type<::pilot::base::CAN_Frame> {
	void read(TypeInput& in, ::pilot::base::CAN_Frame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::CAN_Frame& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::CAN_Frame& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::CAN_Frame& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::CAN_Frame& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::CAN_Frame& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::CAN_ProxyBase> {
	void read(TypeInput& in, ::pilot::base::CAN_ProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::CAN_ProxyBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::CAN_ProxyBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::CAN_ProxyBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::CAN_ProxyBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::base::CAN_Proxy_send> {
	void read(TypeInput& in, ::pilot::base::CAN_Proxy_send& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::CAN_Proxy_send& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::CAN_Proxy_send& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::CAN_Proxy_send& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::CAN_Proxy_send& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::CAN_Proxy_send& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::CAN_Proxy_send_return> {
	void read(TypeInput& in, ::pilot::base::CAN_Proxy_send_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::CAN_Proxy_send_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::CAN_Proxy_send_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::CAN_Proxy_send_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::CAN_Proxy_send_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::CAN_Proxy_send_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::DataPacket> {
	void read(TypeInput& in, ::pilot::base::DataPacket& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::DataPacket& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::DataPacket& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::DataPacket& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::DataPacket& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::DataPacket& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::SerialPortBase> {
	void read(TypeInput& in, ::pilot::base::SerialPortBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::SerialPortBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::SerialPortBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::SerialPortBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::SerialPortBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::base::SerialPort_close_port> {
	void read(TypeInput& in, ::pilot::base::SerialPort_close_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::SerialPort_close_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::SerialPort_close_port& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::SerialPort_close_port& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::SerialPort_close_port& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::SerialPort_close_port& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::SerialPort_close_port_return> {
	void read(TypeInput& in, ::pilot::base::SerialPort_close_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::SerialPort_close_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::SerialPort_close_port_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::SerialPort_close_port_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::SerialPort_close_port_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::SerialPort_close_port_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::SerialPort_open_port> {
	void read(TypeInput& in, ::pilot::base::SerialPort_open_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::SerialPort_open_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::SerialPort_open_port& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::SerialPort_open_port& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::SerialPort_open_port& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::SerialPort_open_port& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::SerialPort_open_port_return> {
	void read(TypeInput& in, ::pilot::base::SerialPort_open_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::SerialPort_open_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::SerialPort_open_port_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::SerialPort_open_port_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::SerialPort_open_port_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::SerialPort_open_port_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::SocketSignal> {
	void read(TypeInput& in, ::pilot::base::SocketSignal& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::SocketSignal& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::SocketSignal& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::SocketSignal& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::SocketSignal& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::SocketSignal& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::UDP_ReceiverBase> {
	void read(TypeInput& in, ::pilot::base::UDP_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::UDP_ReceiverBase& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::UDP_ReceiverBase& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::UDP_ReceiverBase& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::UDP_ReceiverBase& value) {
		vnx::accept(visitor, value);
	}
};

/// \private
template<>
struct type<::pilot::base::UDP_Receiver_close_port> {
	void read(TypeInput& in, ::pilot::base::UDP_Receiver_close_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_close_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::UDP_Receiver_close_port& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::UDP_Receiver_close_port& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_close_port& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::UDP_Receiver_close_port& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::UDP_Receiver_close_port_return> {
	void read(TypeInput& in, ::pilot::base::UDP_Receiver_close_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_close_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::UDP_Receiver_close_port_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::UDP_Receiver_close_port_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_close_port_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::UDP_Receiver_close_port_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::UDP_Receiver_open_port> {
	void read(TypeInput& in, ::pilot::base::UDP_Receiver_open_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_open_port& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::UDP_Receiver_open_port& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::UDP_Receiver_open_port& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_open_port& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::UDP_Receiver_open_port& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::UDP_Receiver_open_port_return> {
	void read(TypeInput& in, ::pilot::base::UDP_Receiver_open_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::UDP_Receiver_open_port_return& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::UDP_Receiver_open_port_return& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::UDP_Receiver_open_port_return& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::UDP_Receiver_open_port_return& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::UDP_Receiver_open_port_return& value, bool special = false);
};

/// \private
template<>
struct type<::pilot::base::can_adapter_e> {
	void read(TypeInput& in, ::pilot::base::can_adapter_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::read(in, value, type_code, code);
	}
	void write(TypeOutput& out, const ::pilot::base::can_adapter_e& value, const TypeCode* type_code, const uint16_t* code) {
		vnx::write(out, value, type_code, code);
	}
	void read(std::istream& in, ::pilot::base::can_adapter_e& value) {
		vnx::read(in, value);
	}
	void write(std::ostream& out, const ::pilot::base::can_adapter_e& value) {
		vnx::write(out, value);
	}
	void accept(Visitor& visitor, const ::pilot::base::can_adapter_e& value) {
		vnx::accept(visitor, value);
	}
	void create_dynamic_code(std::vector<uint16_t>& code);
	void create_dynamic_code(std::vector<uint16_t>& code, const ::pilot::base::can_adapter_e& value, bool special = false);
};


} // namespace vnx

#endif // INCLUDE_pilot_base_PACKAGE_HXX_
