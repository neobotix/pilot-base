
// AUTO GENERATED by vnxcppcodegen

#include <vnx/vnx.h>
#include <pilot/base/package.hxx>
#include <pilot/base/JoystickAsyncClient.hxx>
#include <pilot/base/Joystick_close_device.hxx>
#include <pilot/base/Joystick_close_device_return.hxx>
#include <pilot/base/Joystick_open_device.hxx>
#include <pilot/base/Joystick_open_device_return.hxx>
#include <vnx/Module.h>
#include <vnx/TopicPtr.hpp>



namespace pilot {
namespace base {

JoystickAsyncClient::JoystickAsyncClient(const std::string& service_name)
	:	AsyncClient::AsyncClient(vnx::Hash64(service_name))
{
}

JoystickAsyncClient::JoystickAsyncClient(vnx::Hash64 service_addr)
	:	AsyncClient::AsyncClient(service_addr)
{
}

uint64_t JoystickAsyncClient::close_device(const std::function<void()>& _callback) {
	auto _method = ::pilot::base::Joystick_close_device::create();
	const auto _request_id = vnx_request(_method);
	vnx_queue_close_device[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

uint64_t JoystickAsyncClient::open_device(const std::function<void()>& _callback) {
	auto _method = ::pilot::base::Joystick_open_device::create();
	const auto _request_id = vnx_request(_method);
	vnx_queue_open_device[_request_id] = _callback;
	vnx_num_pending++;
	return _request_id;
}

std::vector<uint64_t> JoystickAsyncClient::vnx_get_pending_ids() const {
	std::vector<uint64_t> _list;
	for(const auto& entry : vnx_queue_close_device) {
		_list.push_back(entry.first);
	}
	for(const auto& entry : vnx_queue_open_device) {
		_list.push_back(entry.first);
	}
	return _list;
}

void JoystickAsyncClient::vnx_purge_request(uint64_t _request_id) {
	vnx_num_pending -= vnx_queue_close_device.erase(_request_id);
	vnx_num_pending -= vnx_queue_open_device.erase(_request_id);
}

void JoystickAsyncClient::vnx_callback_switch(uint64_t _request_id, std::shared_ptr<const vnx::Value> _value) {
	const auto _type_hash = _value->get_type_hash();
	if(_type_hash == vnx::Hash64(0xf6658818750ccdfbull)) {
		const auto _iter = vnx_queue_close_device.find(_request_id);
		if(_iter != vnx_queue_close_device.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_close_device.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		} else {
			throw std::runtime_error("JoystickAsyncClient: invalid return received");
		}
	}
	else if(_type_hash == vnx::Hash64(0x62c17e5ed453f52ull)) {
		const auto _iter = vnx_queue_open_device.find(_request_id);
		if(_iter != vnx_queue_open_device.end()) {
			const auto _callback = std::move(_iter->second);
			vnx_queue_open_device.erase(_iter);
			vnx_num_pending--;
			if(_callback) {
				_callback();
			}
		} else {
			throw std::runtime_error("JoystickAsyncClient: invalid return received");
		}
	}
	else {
		throw std::runtime_error("JoystickAsyncClient: unknown return type");
	}
}


} // namespace pilot
} // namespace base
