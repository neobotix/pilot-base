
// AUTO GENERATED by vnxcppcodegen

#include <pilot/base/package.hxx>
#include <pilot/base/JoystickBase.hxx>
#include <vnx/NoSuchMethod.hxx>
#include <pilot/base/Joystick_close_device.hxx>
#include <pilot/base/Joystick_close_device_return.hxx>
#include <pilot/base/Joystick_open_device.hxx>
#include <pilot/base/Joystick_open_device_return.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/TopicPtr.hpp>

#include <vnx/vnx.h>


namespace pilot {
namespace base {


const vnx::Hash64 JoystickBase::VNX_TYPE_HASH(0x68212ad042408453ull);
const vnx::Hash64 JoystickBase::VNX_CODE_HASH(0x963d84a74274518dull);

JoystickBase::JoystickBase(const std::string& _vnx_name)
	:	Module::Module(_vnx_name)
{
	vnx::read_config(vnx_name + ".device", device);
	vnx::read_config(vnx_name + ".error_interval_ms", error_interval_ms);
	vnx::read_config(vnx_name + ".invert", invert);
	vnx::read_config(vnx_name + ".output", output);
	vnx::read_config(vnx_name + ".read_timeout_ms", read_timeout_ms);
	vnx::read_config(vnx_name + ".stats_interval_ms", stats_interval_ms);
}

vnx::Hash64 JoystickBase::get_type_hash() const {
	return VNX_TYPE_HASH;
}

const char* JoystickBase::get_type_name() const {
	return "pilot.base.Joystick";
}
const vnx::TypeCode* JoystickBase::get_type_code() const {
	return pilot::base::vnx_native_type_code_JoystickBase;
}

void JoystickBase::accept(vnx::Visitor& _visitor) const {
	const vnx::TypeCode* _type_code = pilot::base::vnx_native_type_code_JoystickBase;
	_visitor.type_begin(*_type_code);
	_visitor.type_field(_type_code->fields[0], 0); vnx::accept(_visitor, output);
	_visitor.type_field(_type_code->fields[1], 1); vnx::accept(_visitor, device);
	_visitor.type_field(_type_code->fields[2], 2); vnx::accept(_visitor, invert);
	_visitor.type_field(_type_code->fields[3], 3); vnx::accept(_visitor, read_timeout_ms);
	_visitor.type_field(_type_code->fields[4], 4); vnx::accept(_visitor, error_interval_ms);
	_visitor.type_field(_type_code->fields[5], 5); vnx::accept(_visitor, stats_interval_ms);
	_visitor.type_end(*_type_code);
}

void JoystickBase::write(std::ostream& _out) const {
	_out << "{";
	_out << "\"output\": "; vnx::write(_out, output);
	_out << ", \"device\": "; vnx::write(_out, device);
	_out << ", \"invert\": "; vnx::write(_out, invert);
	_out << ", \"read_timeout_ms\": "; vnx::write(_out, read_timeout_ms);
	_out << ", \"error_interval_ms\": "; vnx::write(_out, error_interval_ms);
	_out << ", \"stats_interval_ms\": "; vnx::write(_out, stats_interval_ms);
	_out << "}";
}

void JoystickBase::read(std::istream& _in) {
	std::map<std::string, std::string> _object;
	vnx::read_object(_in, _object);
	for(const auto& _entry : _object) {
		if(_entry.first == "device") {
			vnx::from_string(_entry.second, device);
		} else if(_entry.first == "error_interval_ms") {
			vnx::from_string(_entry.second, error_interval_ms);
		} else if(_entry.first == "invert") {
			vnx::from_string(_entry.second, invert);
		} else if(_entry.first == "output") {
			vnx::from_string(_entry.second, output);
		} else if(_entry.first == "read_timeout_ms") {
			vnx::from_string(_entry.second, read_timeout_ms);
		} else if(_entry.first == "stats_interval_ms") {
			vnx::from_string(_entry.second, stats_interval_ms);
		}
	}
}

vnx::Object JoystickBase::to_object() const {
	vnx::Object _object;
	_object["output"] = output;
	_object["device"] = device;
	_object["invert"] = invert;
	_object["read_timeout_ms"] = read_timeout_ms;
	_object["error_interval_ms"] = error_interval_ms;
	_object["stats_interval_ms"] = stats_interval_ms;
	return _object;
}

void JoystickBase::from_object(const vnx::Object& _object) {
	for(const auto& _entry : _object.field) {
		if(_entry.first == "device") {
			_entry.second.to(device);
		} else if(_entry.first == "error_interval_ms") {
			_entry.second.to(error_interval_ms);
		} else if(_entry.first == "invert") {
			_entry.second.to(invert);
		} else if(_entry.first == "output") {
			_entry.second.to(output);
		} else if(_entry.first == "read_timeout_ms") {
			_entry.second.to(read_timeout_ms);
		} else if(_entry.first == "stats_interval_ms") {
			_entry.second.to(stats_interval_ms);
		}
	}
}

/// \private
std::ostream& operator<<(std::ostream& _out, const JoystickBase& _value) {
	_value.write(_out);
	return _out;
}

/// \private
std::istream& operator>>(std::istream& _in, JoystickBase& _value) {
	_value.read(_in);
	return _in;
}

const vnx::TypeCode* JoystickBase::static_get_type_code() {
	const vnx::TypeCode* type_code = vnx::get_type_code(VNX_TYPE_HASH);
	if(!type_code) {
		type_code = vnx::register_type_code(static_create_type_code());
	}
	return type_code;
}

std::shared_ptr<vnx::TypeCode> JoystickBase::static_create_type_code() {
	std::shared_ptr<vnx::TypeCode> type_code = std::make_shared<vnx::TypeCode>();
	type_code->name = "pilot.base.Joystick";
	type_code->type_hash = vnx::Hash64(0x68212ad042408453ull);
	type_code->code_hash = vnx::Hash64(0x963d84a74274518dull);
	type_code->is_native = true;
	type_code->methods.resize(3);
	type_code->methods[0] = ::vnx::ModuleInterface_vnx_get_type_code::static_get_type_code();
	type_code->methods[1] = ::pilot::base::Joystick_open_device::static_get_type_code();
	type_code->methods[2] = ::pilot::base::Joystick_close_device::static_get_type_code();
	type_code->fields.resize(6);
	{
		vnx::TypeField& field = type_code->fields[0];
		field.is_extended = true;
		field.name = "output";
		field.code = {12, 5};
	}
	{
		vnx::TypeField& field = type_code->fields[1];
		field.is_extended = true;
		field.name = "device";
		field.code = {32};
	}
	{
		vnx::TypeField& field = type_code->fields[2];
		field.name = "invert";
		field.value = vnx::to_string(false);
		field.code = {31};
	}
	{
		vnx::TypeField& field = type_code->fields[3];
		field.name = "read_timeout_ms";
		field.value = vnx::to_string(200);
		field.code = {7};
	}
	{
		vnx::TypeField& field = type_code->fields[4];
		field.name = "error_interval_ms";
		field.value = vnx::to_string(1000);
		field.code = {7};
	}
	{
		vnx::TypeField& field = type_code->fields[5];
		field.name = "stats_interval_ms";
		field.value = vnx::to_string(10000);
		field.code = {7};
	}
	type_code->build();
	return type_code;
}

void JoystickBase::vnx_handle_switch(std::shared_ptr<const vnx::Sample> _sample) {
}

std::shared_ptr<vnx::Value> JoystickBase::vnx_call_switch(std::shared_ptr<const vnx::Value> _method, const vnx::request_id_t& _request_id) {
	const auto _type_hash = _method->get_type_hash();
	if(_type_hash == vnx::Hash64(0x305ec4d628960e5dull)) {
		auto _args = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::vnx::ModuleInterface_vnx_get_type_code_return::create();
		_return_value->_ret_0 = vnx_get_type_code();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0xfe6952f5f15ef88cull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::base::Joystick_open_device>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::base::Joystick_open_device_return::create();
		open_device();
		return _return_value;
	} else if(_type_hash == vnx::Hash64(0x94dbb3b7e0068f79ull)) {
		auto _args = std::dynamic_pointer_cast<const ::pilot::base::Joystick_close_device>(_method);
		if(!_args) {
			throw std::logic_error("vnx_call_switch(): !_args");
		}
		auto _return_value = ::pilot::base::Joystick_close_device_return::create();
		close_device();
		return _return_value;
	}
	auto _ex = vnx::NoSuchMethod::create();
	_ex->dst_mac = vnx_request ? vnx_request->dst_mac : 0;
	_ex->method = _method->get_type_name();
	return _ex;
}


} // namespace pilot
} // namespace base


namespace vnx {

void read(TypeInput& in, ::pilot::base::JoystickBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(code) {
		switch(code[0]) {
			case CODE_OBJECT:
			case CODE_ALT_OBJECT: {
				Object tmp;
				vnx::read(in, tmp, type_code, code);
				value.from_object(tmp);
				return;
			}
			case CODE_DYNAMIC:
			case CODE_ALT_DYNAMIC:
				vnx::read_dynamic(in, value);
				return;
		}
	}
	if(!type_code) {
		throw std::logic_error("read(): type_code == 0");
	}
	if(code) {
		switch(code[0]) {
			case CODE_STRUCT: type_code = type_code->depends[code[1]]; break;
			case CODE_ALT_STRUCT: type_code = type_code->depends[vnx::flip_bytes(code[1])]; break;
			default: vnx::skip(in, type_code, code); return;
		}
	}
	const char* const _buf = in.read(type_code->total_field_size);
	if(type_code->is_matched) {
		{
			const vnx::TypeField* const _field = type_code->field_map[2];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.invert, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[3];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.read_timeout_ms, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[4];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.error_interval_ms, _field->code.data());
			}
		}
		{
			const vnx::TypeField* const _field = type_code->field_map[5];
			if(_field) {
				vnx::read_value(_buf + _field->offset, value.stats_interval_ms, _field->code.data());
			}
		}
	}
	for(const vnx::TypeField* _field : type_code->ext_fields) {
		switch(_field->native_index) {
			case 0: vnx::read(in, value.output, type_code, _field->code.data()); break;
			case 1: vnx::read(in, value.device, type_code, _field->code.data()); break;
			default: vnx::skip(in, type_code, _field->code.data());
		}
	}
}

void write(TypeOutput& out, const ::pilot::base::JoystickBase& value, const TypeCode* type_code, const uint16_t* code) {
	if(!type_code || (code && code[0] == CODE_ANY)) {
		type_code = pilot::base::vnx_native_type_code_JoystickBase;
		out.write_type_code(type_code);
		vnx::write_class_header<::pilot::base::JoystickBase>(out);
	}
	if(code && code[0] == CODE_STRUCT) {
		type_code = type_code->depends[code[1]];
	}
	char* const _buf = out.write(13);
	vnx::write_value(_buf + 0, value.invert);
	vnx::write_value(_buf + 1, value.read_timeout_ms);
	vnx::write_value(_buf + 5, value.error_interval_ms);
	vnx::write_value(_buf + 9, value.stats_interval_ms);
	vnx::write(out, value.output, type_code, type_code->fields[0].code.data());
	vnx::write(out, value.device, type_code, type_code->fields[1].code.data());
}

void read(std::istream& in, ::pilot::base::JoystickBase& value) {
	value.read(in);
}

void write(std::ostream& out, const ::pilot::base::JoystickBase& value) {
	value.write(out);
}

void accept(Visitor& visitor, const ::pilot::base::JoystickBase& value) {
	value.accept(visitor);
}

} // vnx
