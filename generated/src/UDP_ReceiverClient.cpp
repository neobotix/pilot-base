
// AUTO GENERATED by vnxcppcodegen

#include <pilot/base/package.hxx>
#include <pilot/base/UDP_ReceiverClient.hxx>
#include <pilot/base/UDP_Receiver_close_port.hxx>
#include <pilot/base/UDP_Receiver_close_port_return.hxx>
#include <pilot/base/UDP_Receiver_open_port.hxx>
#include <pilot/base/UDP_Receiver_open_port_return.hxx>
#include <vnx/Module.h>
#include <vnx/ModuleInterface_vnx_get_type_code.hxx>
#include <vnx/ModuleInterface_vnx_get_type_code_return.hxx>
#include <vnx/TopicPtr.hpp>

#include <vnx/vnx.h>


namespace pilot {
namespace base {

UDP_ReceiverClient::UDP_ReceiverClient(const std::string& service_name)
	:	Client::Client(vnx::Hash64(service_name))
{
}

UDP_ReceiverClient::UDP_ReceiverClient(vnx::Hash64 service_addr)
	:	Client::Client(service_addr)
{
}

::vnx::TypeCode UDP_ReceiverClient::vnx_get_type_code() {
	auto _method = ::vnx::ModuleInterface_vnx_get_type_code::create();
	auto _return_value = vnx_request(_method);
	auto _result = std::dynamic_pointer_cast<const ::vnx::ModuleInterface_vnx_get_type_code_return>(_return_value);
	if(!_result) {
		throw std::logic_error("UDP_ReceiverClient: !_result");
	}
	return _result->_ret_0;
}

void UDP_ReceiverClient::open_port() {
	auto _method = ::pilot::base::UDP_Receiver_open_port::create();
	auto _return_value = vnx_request(_method);
}

void UDP_ReceiverClient::open_port_async() {
	vnx_is_async = true;
	open_port();
}

void UDP_ReceiverClient::close_port() {
	auto _method = ::pilot::base::UDP_Receiver_close_port::create();
	auto _return_value = vnx_request(_method);
}

void UDP_ReceiverClient::close_port_async() {
	vnx_is_async = true;
	close_port();
}


} // namespace pilot
} // namespace base
